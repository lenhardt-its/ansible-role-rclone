---
- name: install fuse
  package:
    name: fuse
    state: present
  become: true
  tags: rclone

- name: configure /etc/fuse.conf
  replace:
    path: /etc/fuse.conf
    regexp: '{{ item.key }}'
    replace: '{{ item.value }}'
  with_items:
    - key: '#mount_max = 1000'
      value: 'mount_max = 1000'
    - key: '#user_allow_other'
      value: 'user_allow_other'
  tags: rclone
  become: true

- name: create system group
  group:
    name: "{{ rclone_system_group }}"
    system: true
    state: present
  when: rclone_system_group != "root"
  become: true
  tags: rclone

- name: create system user
  user:
    name: "{{ rclone_system_user }}"
    #system: true
    #shell: "/sbin/nologin"
    group: "{{ rclone_system_group }}"
    #createhome: false
    #home: /
  when: rclone_system_user != "root"
  become: true
  tags: rclone

- name: create folders
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ rclone_system_user }}"
    group: "{{ rclone_system_group }}"
    mode: "0755"
  with_items:
    - "{{ rclone_config_dir }}"
    - "{{ rclone_mountfolder }}"
    - "{{ rclone_cryptfolder }}"
  tags: rclone
  become: true

- name: check if is installed
  stat:
    path: "/usr/local/bin/rclone"
  register: __rclone_is_installed
  become: true
  tags: rclone

- name: gather currently installed version (if any)
  command: "/usr/local/bin/rclone version"
  args:
    warn: false
  changed_when: false
  register: __rclone_current_version_output
  when: __rclone_is_installed.stat.exists
  become: true
  tags: rclone

- block:
  - name: get latest release
    uri:
      url: "https://api.github.com/repos/rclone/rclone/releases/latest"
      method: GET
      return_content: true
      status_code: 200
      body_format: json
      validate_certs: false
      user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
      password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
    environment: "{{proxy_env}}"
    no_log: "{{ not lookup('env', 'MOLECULE_DEBUG') | bool }}"
    register: _latest_release
    until: _latest_release.status == 200
    retries: 5

  - name: "set rclone version to {{ _latest_release.json.tag_name[1:] }}"
    set_fact:
      rclone_version: "{{ _latest_release.json.tag_name[1:] }}"
  when: rclone_version == "latest"
  delegate_to: localhost
  run_once: true
  become: true
  tags: rclone

- block:
  - name: get checksum list from github
    set_fact:
      _checksums: "{{ lookup('url', 'https://github.com/rclone/rclone/releases/download/v' + rclone_version + '/SHA256SUMS', wantlist=True) | list }}"
    environment: "{{ proxy_env }}"
    run_once: true
    become: true
    tags: rclone

  - name: "get checksum for {{ go_arch }} architecture"
    set_fact:
      rclone_checksum: "{{ item.split(' ')[0] }}"
    with_items: "{{ _checksums }}"
    when: "('rclone-v' + rclone_version + '-linux-' + go_arch + '.zip') in item"
    become: true
    tags: rclone

  - name: download binary to local folder
    get_url:
      url: "https://github.com/rclone/rclone/releases/download/v{{ rclone_version }}/rclone-v{{ rclone_version}}-linux-{{ go_arch }}.zip"
      dest: "/tmp/rclone-{{ rclone_version }}.linux-{{ go_arch }}.zip"
      checksum: "sha256:{{ rclone_checksum }}"
    environment: "{{proxy_env}}"
    register: _download_binary
    until: _download_binary is succeeded
    retries: 5
    delay: 2
    delegate_to: localhost
    check_mode: false
    become: true
    tags: rclone

  - name: unpack binary
    unarchive:
      src: "/tmp/rclone-{{ rclone_version }}.linux-{{ go_arch }}.zip"
      dest: "/tmp"
      creates: "/tmp/rclone-{{ rclone_version }}.linux-{{ go_arch }}"
    delegate_to: localhost
    check_mode: false
    become: true
    tags: rclone

  - name: propagate binaries
    copy:
      src: "/tmp/rclone-v{{ rclone_version }}-linux-{{ go_arch }}/rclone"
      dest: "{{ rclone_binary_install_dir }}/rclone"
      mode: 0755
      owner: root
      group: root
    notify:
    - restart rclone-mount
    - restart rclone-http
    when: not ansible_check_mode
    become: true
    tags: rclone
  when: (not __rclone_is_installed.stat.exists) or (__rclone_current_version_output.stdout_lines[0].split(" ")[1] != rclone_version)

- name: configure rclone
  template:
    src: rclone.conf.j2
    dest: "{{ rclone_config_dir }}/{{ rclone_config_file }}"
    owner: "{{ rclone_system_user }}"
    group: "{{ rclone_system_group }}"
    mode: "0640"
    force: no
  notify:
    - restart rclone-mount
    - restart rclone-http
  tags: rclone
  become: true

- name: copy crypt service systemd unit
  template:
    src: "rclone-mount.service.j2"
    dest: "/etc/systemd/system/rclone-mount.service"
    owner: root
    group: root
    mode: "0640"
  notify: restart rclone-mount
  tags: rclone
  become: true

- name: copy http service systemd unit
  template:
    src: "rclone-http.service.j2"
    dest: "/etc/systemd/system/rclone-http.service"
    owner: root
    group: root
    mode: "0640"
  notify: restart rclone-http
  when: rclone_http_service_enable
  tags: rclone
  become: true

- name: start and enable rclone services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - rclone-mount
    - rclone-http
  tags: rclone
  become: true
